{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\GitHub\\\\uita\\\\uitareact\\\\src\\\\ExamAvailability\\\\ExamAvailability.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport globalVar from '../../globalVar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExamAvailability = () => {\n  _s();\n  const {\n    certificationId\n  } = useParams(); // Get certificationId from the URL\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const vendorId = queryParams.get('vendorId'); // Get vendorId from query params\n  const [examData, setExamData] = useState(null);\n  useEffect(() => {\n    // Fetch exams based on certificationId and vendorId\n    const fetchExamData = async () => {\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          certificationId\n        })\n      };\n      try {\n        const response = await fetch(globalVar.url + 'available_exam', requestOptions);\n        const data = await response.json();\n        setExamData(data);\n        console.log('Available Exams:', data);\n      } catch (error) {\n        console.error('Error fetching exam data:', error);\n      }\n    };\n    if (certificationId) {\n      fetchExamData();\n    }\n  }, [certificationId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Exam Availability for Certification ID: \", certificationId, \" and Vendor ID: \", vendorId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), examData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: examData.data.map(exam => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: exam.exam_Name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Status: \", exam.status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 29\n        }, this)]\n      }, exam.examId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading exams...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n_s(ExamAvailability, \"50mse95u5NpyCOBGW++bMYRIkbs=\", false, function () {\n  return [useParams, useLocation];\n});\n_c = ExamAvailability;\nexport default ExamAvailability;\nvar _c;\n$RefreshReg$(_c, \"ExamAvailability\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useLocation","globalVar","jsxDEV","_jsxDEV","ExamAvailability","_s","certificationId","location","queryParams","URLSearchParams","search","vendorId","get","examData","setExamData","fetchExamData","requestOptions","method","headers","body","JSON","stringify","response","fetch","url","data","json","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","exam","exam_Name","status","examId","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/GitHub/uita/uitareact/src/ExamAvailability/ExamAvailability.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams, useLocation } from 'react-router-dom';\r\nimport globalVar from '../../globalVar';\r\n\r\nconst ExamAvailability = () => {\r\n    const { certificationId } = useParams(); // Get certificationId from the URL\r\n    const location = useLocation();\r\n    const queryParams = new URLSearchParams(location.search);\r\n    const vendorId = queryParams.get('vendorId'); // Get vendorId from query params\r\n    const [examData, setExamData] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // Fetch exams based on certificationId and vendorId\r\n        const fetchExamData = async () => {\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ certificationId })\r\n            };\r\n\r\n            try {\r\n                const response = await fetch(globalVar.url + 'available_exam', requestOptions);\r\n                const data = await response.json();\r\n                setExamData(data);\r\n                console.log('Available Exams:', data);\r\n            } catch (error) {\r\n                console.error('Error fetching exam data:', error);\r\n            }\r\n        };\r\n\r\n        if (certificationId) {\r\n            fetchExamData();\r\n        }\r\n    }, [certificationId]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Exam Availability for Certification ID: {certificationId} and Vendor ID: {vendorId}</h1>\r\n            {examData ? (\r\n                <div>\r\n                    {/* Display exam data */}\r\n                    {examData.data.map(exam => (\r\n                        <div key={exam.examId}>\r\n                            <h2>{exam.exam_Name}</h2>\r\n                            <p>Status: {exam.status}</p>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            ) : (\r\n                <p>Loading exams...</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExamAvailability;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAOC,SAAS,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM;IAAEC;EAAgB,CAAC,GAAGP,SAAS,CAAC,CAAC,CAAC,CAAC;EACzC,MAAMQ,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAMQ,WAAW,GAAG,IAAIC,eAAe,CAACF,QAAQ,CAACG,MAAM,CAAC;EACxD,MAAMC,QAAQ,GAAGH,WAAW,CAACI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACZ;IACA,MAAMkB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,MAAMC,cAAc,GAAG;QACnBC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEf;QAAgB,CAAC;MAC5C,CAAC;MAED,IAAI;QACA,MAAMgB,QAAQ,GAAG,MAAMC,KAAK,CAACtB,SAAS,CAACuB,GAAG,GAAG,gBAAgB,EAAER,cAAc,CAAC;QAC9E,MAAMS,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClCZ,WAAW,CAACW,IAAI,CAAC;QACjBE,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEH,IAAI,CAAC;MACzC,CAAC,CAAC,OAAOI,KAAK,EAAE;QACZF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACrD;IACJ,CAAC;IAED,IAAIvB,eAAe,EAAE;MACjBS,aAAa,CAAC,CAAC;IACnB;EACJ,CAAC,EAAE,CAACT,eAAe,CAAC,CAAC;EAErB,oBACIH,OAAA;IAAA2B,QAAA,gBACI3B,OAAA;MAAA2B,QAAA,GAAI,0CAAwC,EAACxB,eAAe,EAAC,kBAAgB,EAACK,QAAQ;IAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAC3FrB,QAAQ,gBACLV,OAAA;MAAA2B,QAAA,EAEKjB,QAAQ,CAACY,IAAI,CAACU,GAAG,CAACC,IAAI,iBACnBjC,OAAA;QAAA2B,QAAA,gBACI3B,OAAA;UAAA2B,QAAA,EAAKM,IAAI,CAACC;QAAS;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACzB/B,OAAA;UAAA2B,QAAA,GAAG,UAAQ,EAACM,IAAI,CAACE,MAAM;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAFtBE,IAAI,CAACG,MAAM;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGhB,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,gBAEN/B,OAAA;MAAA2B,QAAA,EAAG;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACzB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAC7B,EAAA,CAjDID,gBAAgB;EAAA,QACUL,SAAS,EACpBC,WAAW;AAAA;AAAAwC,EAAA,GAF1BpC,gBAAgB;AAmDtB,eAAeA,gBAAgB;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}