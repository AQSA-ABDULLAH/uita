{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\GitHub\\\\uita\\\\uitareact\\\\src\\\\ExamAvailability\\\\ExamAvailability.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, Row, Col, Breadcrumb, Spinner, Card } from 'react-bootstrap';\nimport { useParams } from 'react-router-dom';\nimport globalVar from '../globalVar'; // Update path as necessary\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ExamAvailability = () => {\n  _s();\n  const {\n    certificationId\n  } = useParams();\n  const [exams, setExams] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchExams = async () => {\n      const requestOptions = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          certificationId: certificationId\n        })\n      };\n      try {\n        const response = await fetch(globalVar.url + 'available_exam', requestOptions);\n        const data = await response.json();\n        setExams(data.data);\n        setLoading(false);\n      } catch (error) {\n        setError(error);\n        setLoading(false);\n      }\n    };\n    fetchExams();\n  }, [certificationId]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"section section-exams inner-page\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex align-items-center justify-content-center\",\n          style: {\n            height: '250px'\n          },\n          children: /*#__PURE__*/_jsxDEV(Spinner, {\n            animation: \"border\",\n            role: \"status\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"visually-hidden\",\n              children: \"Loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-danger\",\n          children: [\"Error fetching exams: \", error.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n            children: [/*#__PURE__*/_jsxDEV(Breadcrumb.Item, {\n              href: \"/\",\n              children: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Breadcrumb.Item, {\n              href: \"/certificates\",\n              children: \"Certificates\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Breadcrumb.Item, {\n              active: true,\n              children: \"Exam Availability\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4\",\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"title page-title\",\n              children: [\"Available Exams for Certificate ID: \", certificationId]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: exams.length > 0 ? exams.map(exam => /*#__PURE__*/_jsxDEV(Col, {\n              sm: 6,\n              lg: 4,\n              xl: 3,\n              children: /*#__PURE__*/_jsxDEV(Card, {\n                className: \"mb-4\",\n                children: /*#__PURE__*/_jsxDEV(Card.Body, {\n                  children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                    children: exam.exam_Name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 69,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                    children: [\"Status: \", exam.status]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 70,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                    children: [\"Updated At: \", exam.updated_at]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 71,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                    children: [\"Created At: \", exam.created_at]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 72,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 45\n              }, this)\n            }, exam.examId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 41\n            }, this)) : /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"alert alert-info\",\n                children: \"No exams available for this certificate.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(ExamAvailability, \"xFsW9lBVI5daYrOz9Vd49tikaqM=\", false, function () {\n  return [useParams];\n});\n_c = ExamAvailability;\nExamAvailability.propTypes = {\n  certificationId: PropTypes.string.isRequired\n};\nexport default ExamAvailability;\nvar _c;\n$RefreshReg$(_c, \"ExamAvailability\");","map":{"version":3,"names":["React","useState","useEffect","PropTypes","Container","Row","Col","Breadcrumb","Spinner","Card","useParams","globalVar","jsxDEV","_jsxDEV","Fragment","_Fragment","ExamAvailability","_s","certificationId","exams","setExams","loading","setLoading","error","setError","fetchExams","requestOptions","method","headers","body","JSON","stringify","response","fetch","url","data","json","children","className","style","height","animation","role","fileName","_jsxFileName","lineNumber","columnNumber","message","Item","href","active","length","map","exam","sm","lg","xl","Body","Title","exam_Name","Text","status","updated_at","created_at","examId","_c","propTypes","string","isRequired","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/GitHub/uita/uitareact/src/ExamAvailability/ExamAvailability.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Container, Row, Col, Breadcrumb, Spinner, Card } from 'react-bootstrap';\r\nimport { useParams } from 'react-router-dom';\r\nimport globalVar from '../globalVar'; // Update path as necessary\r\n\r\nconst ExamAvailability = () => {\r\n    const { certificationId } = useParams();\r\n    const [exams, setExams] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchExams = async () => {\r\n            const requestOptions = {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ certificationId: certificationId })\r\n            };\r\n\r\n            try {\r\n                const response = await fetch(globalVar.url + 'available_exam', requestOptions);\r\n                const data = await response.json();\r\n                setExams(data.data);\r\n                setLoading(false);\r\n            } catch (error) {\r\n                setError(error);\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchExams();\r\n    }, [certificationId]);\r\n\r\n    return (\r\n        <>\r\n            <section className=\"section section-exams inner-page\">\r\n                <Container>\r\n                    {loading ? (\r\n                        <div className='d-flex align-items-center justify-content-center' style={{ height: '250px' }}>\r\n                            <Spinner animation=\"border\" role=\"status\">\r\n                                <span className=\"visually-hidden\">Loading...</span>\r\n                            </Spinner>\r\n                        </div>\r\n                    ) : error ? (\r\n                        <div className=\"alert alert-danger\">\r\n                            Error fetching exams: {error.message}\r\n                        </div>\r\n                    ) : (\r\n                        <>\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\r\n                                <Breadcrumb.Item href=\"/certificates\">Certificates</Breadcrumb.Item>\r\n                                <Breadcrumb.Item active>Exam Availability</Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n\r\n                            <div className='mb-4'>\r\n                                <h2 className=\"title page-title\">\r\n                                    Available Exams for Certificate ID: {certificationId}\r\n                                </h2>\r\n                            </div>\r\n\r\n                            <Row>\r\n                                {exams.length > 0 ? (\r\n                                    exams.map((exam) => (\r\n                                        <Col sm={6} lg={4} xl={3} key={exam.examId}>\r\n                                            <Card className=\"mb-4\">\r\n                                                <Card.Body>\r\n                                                    <Card.Title>{exam.exam_Name}</Card.Title>\r\n                                                    <Card.Text>Status: {exam.status}</Card.Text>\r\n                                                    <Card.Text>Updated At: {exam.updated_at}</Card.Text>\r\n                                                    <Card.Text>Created At: {exam.created_at}</Card.Text>\r\n                                                </Card.Body>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    ))\r\n                                ) : (\r\n                                    <Col>\r\n                                        <div className=\"alert alert-info\">\r\n                                            No exams available for this certificate.\r\n                                        </div>\r\n                                    </Col>\r\n                                )}\r\n                            </Row>\r\n                        </>\r\n                    )}\r\n                </Container>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nExamAvailability.propTypes = {\r\n    certificationId: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ExamAvailability;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}